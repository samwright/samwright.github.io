{"name":"Sam Wright","tagline":"A little about me and my software projects...","body":"### Bio\r\nI am currently studying for a MSc in computer science from Birkbeck College of the University of London, and have a masters in physics from the University of Oxford.  \r\n\r\nI am interested in machine learning, computer vision, and human computer interaction (specifically hand gesture recognition), and enjoy using OODP principles (ie. software design patterns, SOLID, GRASP) and experimenting with functional paradigms.  Most recently I've been programming in Java and a little in Scala, and have previously used Python and dabbled in C++.\r\n\r\n### Recent big projects\r\n\r\n#### Hand gesture recognition system (2013 MSc project)\r\n###### [source code](https://github.com/samwright/gesture-framework) - work in progress -\r\nThis project has two main aims - first, to create an extensible workflow editor/engine to allow the user to construct and configure a hand gesture recognition workflow from constituent algorithms (eg. image transformations, hand pose estimation, and hand detection and tracking) with inbuilt testing features.\r\n\r\nSecondly, once a successful recognition workflow has been created, the user can configure actions to perform when each gesture is recognised (eg. play music, change volume, etc...).\r\n\r\nAs an aside - the workflow engine I've created allows for <a href=\"http://en.wikipedia.org/wiki/Transduction_(machine_learning)\">transductive</a> machine learning, whereby features selected from the input images are used as markers by which optimisations to the workflow can be configured.\r\n\r\n#### Dominoes AI player (2013 coursework project)\r\n###### [source code](https://github.com/samwright/DominosPlayground)\r\nI created an AI player for the game of dominoes as part of a team project as a coursework.  It works by creating a lazily-initialised decision tree of future moves (both of the AI player and its opponent) where each game state has a score associated with it based on the dominoes in both the player's and the opponent's hands.  I then implemented a minmax algorithm to find the best possible final game state, and therefore the best possible move.  In tests against a short-sighted AI player (which places its highest-valued placeable domino without considering future moves) it won about 82% of the time.\r\n\r\nThe completed project with all of the team's code can be found [here](https://github.com/samwright/DominoesGame).\r\n\r\n#### Spectroscopy analysis system (2012 MPhys project)\r\nI created a software package to be used in an experiment to be included in the Oxford physics undergraduate teaching course which would investigate semiconductor band gaps, phonons and excitons, specifically by looking at their temperature-dependent behaviour.\r\n\r\nAlong with some calibration utilities, the main part of the software package interfaces with a spectrascopic sensor and a temperature sensor which allows for spectra to be automatically recorded at specific temperatures.  The user can then manipulate spectra in realtime using symbolic algebra to monitor properties such as absorbance and reflectivity.\r\n\r\n#### SGC project (2011 vacation project)\r\nThe mission of the Structural Genomics Consortium (SGC) is to resolve the structures of interesting proteins using X-ray crystallography. The process to do this involves a myriad of programs and choices of which it difficult to gain an informed overview. I started development of an overarching workflow-based management program to add transparency to the process and allow for further computational improvement of it through distributed execution and ultimately transducive machine learning.\r\n\r\n### Recent smaller projects\r\n\r\n#### Experimenting with Scala \r\n###### [source code](https://github.com/samwright/Scala_Playground)\r\nI went through most of the documentation on the [scala website](http://www.scala-lang.org/documentation/) and wrote example code to demonstrate Scala's functionality.\r\n\r\n#### Turing Machine\r\n###### [source code](https://github.com/samwright/TuringMachine)\r\nFor fun, I implemented a Turing machine along with exemplar Turing programs, including an automated Turing machine, and a simple Swing-based GUI.\r\n\r\n#### Artificial Neural Network\r\n###### [source code](https://github.com/samwright/NeuralNet)\r\nTo help understand machine learning I implemented an ANN and the backpropogation algorithm, and tested that it could learn all 2-input, 1-output boolean functions (eg. and, or, xor, etc...).\r\n\r\n#### Contact Manager\r\n###### [source code](https://github.com/samwright/ContactManager)\r\nThis was a coursework project to implement a supplied interface for a contact manager (ie. address book).  It was quite a simple project which was intended to demonstrate my ability to write POJO and implement TDD.\r\n\r\n#### Design Patterns\r\n###### [source code](https://github.com/samwright/software-design-patterns)\r\nI implemented some of the software design patterns to familiarise myself with the patterns and to play with C++.\r\n\r\n### Addendum\r\nBefore using this GitHub account, I used @BBK-PiJ-2012-01 as part of my programming in java course at Birkbeck - hence why this account has only very recent activity.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}