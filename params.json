{"name":"Sam Wright","tagline":"A little about me and my software projects...","body":"### Bio\r\n###### [email](http://www.google.com/recaptcha/mailhide/d?k=012lPMTmCPpnS3gydFzEwUYA==&c=4twRdnawsb0NVtd5sGd9JOsWkO5cY29rvTooO_eS6Gw=) / [pgp key](http://samwright.github.io/downloads/gpg_key.txt)\r\nI am currently working as a freelance contractor for Bruker Corporation at SGC Oxford, and have an MSc in computer science from Birkbeck College of the University of London and a masters degree in physics from the University of Oxford. I enjoy working in an interdisciplinary area where I can bring together my understanding of physics and computer science to write some interesting software.\r\n\r\nI have experience in machine learning, computer vision, robotics, and tomographic-reconstruction algorithms, and enjoy using OODP principles (ie. software design patterns, SOLID, GRASP) and experimenting with functional paradigms. Most recently I've been programming in Python and Java and a little in Scala and javascript, and have previously used in C and C++.\r\n\r\n### Recent big projects\r\n\r\n#### X-ray micro-beam controller for protein crystallography (2014 SGC Oxford/Bruker Corp) - _in Python_\r\n###### closed source - work in progress\r\nI wrote a software package to position a set of microscopic apertures in an X-ray beam to reduce its profile to the size of the crystal being shot, thereby increasing the signal to noise ratio in the resulting diffraction data. To validate the X-ray beam profile I designed a knife-edge to cut across the beam at 18 discrete angles, and implemented a tomographic-reconstruction algorithm to create a 2D image of the beam. The positions of the apertures and knife-edges are determined automatically through computer vision techniques applied to images taken from an optical camera in-line with the beam.\r\n\r\n#### Improvements to high-throughput robotic sample-handling system (2014 SGC Oxford/Bruker Corp) - _in Python_\r\n###### closed source - work in progress\r\nA Mitsubishi robot arm is used to move crystal samples from a liquid nitrogen dewar into an X-ray beam before being shot, before being returned to the dewar. I improved the robot's code (written in MELFA BASIC) to be more reliable in avoiding collisions, and the PC controller's code to improve error detection and notification.\r\n\r\n#### Hand gesture recognition system (2013 MSc project) - _in Java_\r\n###### [source code](https://github.com/samwright/gesture-framework) / [proposal](http://samwright.github.io/downloads/MScProposal.pdf) / [report](http://samwright.github.io/downloads/MScReport.pdf) / [video 1](http://samwright.github.io/downloads/vid1.mov) / [video 2](http://samwright.github.io/downloads/vid2.mov) / [video 3](http://samwright.github.io/downloads/vid3.mov) / [video 4](http://samwright.github.io/downloads/vid4.mov)\r\nThis project had two main aims - first, to create an extensible workflow editor/engine to allow the user to construct and configure a hand gesture recognition workflow from constituent algorithms (eg. image transformations, hand pose estimation, and hand detection and tracking) with inbuilt testing features. Machine learning was built into the workflow engine to allow for choices to be made (for example, which of a variety of subworkflows to use) based on the performance of similar test data, allowing for <a href=\"http://en.wikipedia.org/wiki/Transduction_(machine_learning)\">transductive learning</a>.\r\n\r\nSecondly, once a successful recognition workflow has been created, the user can configure keyboard events to be triggered when each gesture is recognised.\r\n\r\n#### Dominoes AI player (2013 coursework project) - _in Java_\r\n###### [source code](https://github.com/samwright/DominosPlayground)\r\nI created an AI player for the game of dominoes as part of a team project as a coursework.  It works by creating a lazily-initialised decision tree of future moves (both of the AI player and its opponent) where each game state has a score associated with it based on the dominoes in both the player's and the opponent's hands.  I then implemented a minmax algorithm to find the best possible final game state, and therefore the best possible move.  In tests against a short-sighted AI player (which places its highest-valued placeable domino without considering future moves) it won about 82% of the time.\r\n\r\nThe completed project with all of the team's code can be found [here](https://github.com/samwright/DominoesGame).\r\n\r\n#### Spectroscopy analysis system (2012 MPhys project) - _in Python_\r\n###### [source code](https://github.com/samwright/TrAPS) / [report](http://samwright.github.io/downloads/MPhysReport.pdf)\r\nI created a software package to be used in an experiment to be included in the Oxford physics undergraduate teaching course which would investigate semiconductor band gaps, phonons and excitons, specifically by looking at their temperature-dependent behaviour.\r\n\r\nAlong with some calibration utilities, the main part of the software package interfaces with a spectrascopic sensor and a temperature sensor which allows for spectra to be automatically recorded at specific temperatures.  The user can then manipulate spectra in realtime using symbolic algebra to monitor properties such as absorbance and reflectivity.\r\n\r\n#### SGC project (2011 vacation project) - _in Python_\r\nThe mission of the Structural Genomics Consortium (SGC) is to resolve the structures of interesting proteins using X-ray crystallography. The process to do this involves a myriad of programs and choices of which it difficult to gain an informed overview. I started development of an overarching workflow-based management program to add transparency to the process and allow for further computational improvement of it through distributed execution and ultimately transducive machine learning.\r\n\r\n### Recent smaller projects\r\n\r\n#### Experimenting with OpenGL - _in Python_\r\n###### [source code - work in progress](https://github.com/samwright/opengl-playground)\r\nI wanted to get accustomed to OpenGL and the way it renders objects (i.e. the model, view and perspective transformations, using quaternions, calculating vertex normals for lighting, etc...). Using [pyglet](http://www.pyglet.org/), I wrote a simple (and simplistic) library to help create, manipulate, group, and render 3D objects.\r\n\r\n#### Feedly client for Pebble Smartwatch - _in Javascript and C_\r\n###### [source code - work in progress](https://github.com/samwright/pebble-feedly)\r\nTo experiment with programming for the Pebble Smartwatch, I'm creating a Feedly client for it. I don't know how useful it will be to read news articles on a watch, but I'm having fun nonetheless!\r\n\r\n#### Experimenting with Functional Paradigms - _in Scala_\r\n###### [source code](https://github.com/samwright/Scala_Playground)\r\nI went through most of the documentation on the [scala website](http://www.scala-lang.org/documentation/) and wrote example code to demonstrate Scala's functionality.\r\n\r\n#### Turing Machine - _in Java_\r\n###### [source code](https://github.com/samwright/TuringMachine)\r\nFor fun, I implemented a Turing machine along with exemplar Turing programs, including an automated Turing machine, and a simple Swing-based GUI.\r\n\r\n#### Artificial Neural Network - _in Java_\r\n###### [source code](https://github.com/samwright/NeuralNet)\r\nTo help understand machine learning I implemented an ANN and the backpropogation algorithm, and tested that it could learn all 2-input, 1-output boolean functions (eg. and, or, xor, etc...).\r\n\r\n#### Experimenting with Hadoop - _in Java_\r\n###### [source code](https://github.com/samwright/HadoopPlayground)\r\nI followed a tutorial and implemented some simple MapReduce algorithms, which I tested using MRUnit and also on a local Hadoop server.\r\n\r\n#### Experimenting with Hibernate - _in Java_\r\n###### [source code](https://github.com/samwright/HibernatePlayground)\r\nI set up Hibernate with an HSQLDB database and an annotation-defined schema filled with test data, and performed some simple queries.\r\n\r\n#### Working Days Calculator - _in Java_\r\n###### [source code](https://github.com/samwright/WorkingDaysCalculator)\r\nSmall tool that calculates when someone will have worked a specified number of days (excluding bank holidays and weekends) starting from a specified date, taking into account bank holidays. Uses Joda-Time and JollyDay.\r\n\r\n#### Contact Manager - _in Java_\r\n###### [source code](https://github.com/samwright/ContactManager)\r\nThis was a coursework project to implement a supplied interface for a contact manager (ie. address book).  It was quite a simple project which was intended to demonstrate my ability to write POJO and implement TDD.\r\n\r\n#### Design Patterns - _in C++_\r\n###### [source code](https://github.com/samwright/software-design-patterns)\r\nI implemented some of the software design patterns to familiarise myself with the patterns and to play with C++.\r\n\r\n### Addendum\r\nBefore using this GitHub account, I used @BBK-PiJ-2012-01 as part of my programming in java course at Birkbeck - hence why this account has only very recent activity.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}